using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Forms;
using System.Windows.Input;
using GalaSoft.MvvmLight.Threading;
using Microsoft.Practices.ServiceLocation;
using Slamby.TAU.Helper;
using Cursors = System.Windows.Input.Cursors;
using DataGrid = System.Windows.Controls.DataGrid;

namespace Slamby.TAU.Control
{
    public class CustomDataGrid : DataGrid
    {

        public CustomDataGrid()
        {
            this.EnableRowVirtualization = true;
            this.SelectionChanged += CustomDataGrid_SelectionChanged;
            this.Loaded += CustomDataGrid_Loaded;
            this.AutoGeneratedColumns += CustomDataGrid_AutoGeneratedColumns;
        }

        private void CustomDataGrid_AutoGeneratedColumns(object sender, EventArgs e)
        {
            Columns[Columns.Count - 1].Width = new DataGridLength(1, DataGridLengthUnitType.Star);
        }

        private async void CustomDataGrid_Loaded(object sender, RoutedEventArgs e)
        {
            await Task.Run(() => DispatcherHelper.CheckBeginInvokeOnUI(() =>
             {

                 Mouse.SetCursor(Cursors.Wait);
                 if (SelectedItemsList != null)
                 {
                     foreach (var item in SelectedItemsList)
                     {
                         this.SelectedItems.Add(item);
                     }
                 }
                 Mouse.SetCursor(Cursors.Arrow);
             }));
        }

        private void OnLoadingRow(object sender, DataGridRowEventArgs e)
        {
            e.Row.Header = e.Row.GetIndex() + 1;
        }

        void CustomDataGrid_SelectionChanged(object sender, SelectionChangedEventArgs e)
        {
            if (this.SelectedItems.Count > 0)
                this.SelectedItemsList = new ObservableCollection<object>(this.SelectedItems.Cast<object>());
            else
            {
                this.SelectedItemsList?.Clear();
            }
        }

        public ObservableCollection<object> SelectedItemsList
        {
            get { return (ObservableCollection<object>)GetValue(SelectedItemsListProperty); }
            set
            {
                SetValue(SelectedItemsListProperty, value);
            }
        }

        // Using a DependencyProperty as the backing store for SelectedItemsList.  This enables animation, styling, binding, etc...
        public static readonly DependencyProperty SelectedItemsListProperty =
            DependencyProperty.Register("SelectedItemsList", typeof(ObservableCollection<object>), typeof(CustomDataGrid), new PropertyMetadata(new ObservableCollection<object>()));


        private bool _isindexed;

        public bool IsIndexed
        {
            get { return _isindexed; }
            set
            {
                _isindexed = value;
                if (value)
                {
                    this.LoadingRow += OnLoadingRow;
                }
                else
                {
                    this.LoadingRow -= OnLoadingRow;
                }
            }
        }
    }
}
